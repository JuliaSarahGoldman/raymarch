#version 410 // -*- c++ -*-
#include <g3dmath.glsl>
#include <Texture/Texture.glsl>
#include <noise.glsl>
      
#define subtractSurface(h, i, j, X, m) max(-h(i, X, m), h(j, X, m))
#define test(f, s, X, m) f(s, X, m)
//http://iquilezles.org/www/articles/distfunctions/distfunctions.htm
#define repeat(h, period, s, X, m) h(s, mod(X, period) - .5 * period, m)
#define surfaceUnion(h, s, j, X, m, r) smin(h(s, X, m), h(j, X, m), r)
#define intersectSurface(h, s, j, X, m) max(h(s, X, m), h(j, X, m))
#define transformSurface(h, M, X)\
  h((inverse(M) * vec4(X, 1.0)).xyz) * determinant(M)
    
      

      

// Input arguments from the C++ program
uniform mat4x3         cameraToWorldMatrix;

uniform TextureCube    environmentMap;

uniform float          tanHalfFieldOfViewY;
uniform float          projectionMatrix22, projectionMatrix23;

// Output to the App::m_framebuffer
out Color3 pixelColor;




struct Material{
    Color3 lambertian;
    Color3 glossy;
    float sigma;
};

struct Surfel{
    Material material;
    Point3 position;
    Vector3 normal;
};

struct ISphere{
    Point3 center;
    float radius;
    Material material;
};

struct IBox{
    Point3 center;
    float radius;
    Material material;
};

struct ITorus{
    Point3 center;
    float minorRadius;
    float majorRadius;
    Material material;
};

struct ICylinder{
    Point3 center;
    float radius;
    float halfHeight;
    Material material;
};

struct Wing{
    ISphere wSphere;
    ISphere cutSphere;
    IBox cutBox;
};

struct Bug{
    Wing wing1;
    Wing wing2;
};

struct Shell{
    ITorus ring1;
    ITorus cut1;
    ITorus ring2;
    ITorus cut2;
    ITorus ring3;
    ITorus cut3;
};

struct Pendant{
    ITorus ring;
    ISphere rCut;
    ICylinder moon;
    ICylinder mCut;
};

struct Pear{
    ISphere bottom;
    ISphere top;
    ICylinder stem;
};



const ISphere sphere1 = ISphere(Point3(0,6.8,0), 1.0, Material(Color3(.3,.5,0), Color3(.3,.3,.3), 30));
const IBox box2 = IBox(Point3(0,6,.0), .5, Material(Color3(.7,0,.9), Color3(0,0,0), 0));
const ISphere egg2 = ISphere(Point3(0,7.8,.0), .5, Material(Color3(.3,.5,0), Color3(.3,.3,.3), 30));
const ISphere sphere2 = ISphere(Point3(-1.3,6,2), .5, Material(Color3(.9,.5,0), Color3(0,0,0), 0));
const ISphere sphere3 = ISphere(Point3(-1.3,6,2.4), .5, Material(Color3(.9,.5,0), Color3(0,0,0), 0));
const ITorus torus = ITorus(Point3(-2, 6.5, -2), 1.0, .5, Material(Color3(0,.5,.7), Color3(0,.7,.5), 3));
const ITorus torus2 = ITorus(Point3(-1.7, 6.5, -2), 1.0, .5, Material(Color3(0,.7,1), Color3(0,0,0), 0));
const ICylinder cylinder = ICylinder(Point3(2, 5.5, 2), .5, 1.0, Material(Color3(0,.7,1), Color3(0,1,0), 10));
const ICylinder cylinder2 = ICylinder(Point3(2, 5.8, 2), .45, 1.3, Material(Color3(0,.7,1), Color3(0,1,0), 10));

const ISphere testSphere = ISphere(Point3(.5,.5,0.0), 0.5, Material(Color3(.85,.02,.25), Color3(0,0,0), 0));
const IBox testBox = IBox(Point3(.5,.5,0.0), 0.5, Material(Color3(.85,.02,.25), Color3(0,0,0), 0));
const ITorus testTorus = ITorus(Point3(.5,.5,0.0), 1.0, 0.5, Material(Color3(.85,.02,.25), Color3(0,0,0), 0));
const ICylinder testCylinder = ICylinder(Point3(.5,.5,0.0), 0.5, 1, Material(Color3(.85,.02,.25), Color3(0,0,0), 0));


const Wing wing1 = Wing( ISphere(Point3(4,6,4), .5, Material(Color3(0,0,0), Color3(0,.5,.8), 2)), ISphere(Point3(4,5.9,4), .5, Material(Color3(.9,.5,0), Color3(1,0,1), 3)), IBox(Point3(3.5,6,4), .5, Material(Color3(.7,0,.9), Color3(0,0,0), 0)));
const Wing wing2 = Wing( ISphere(Point3(4.8,6,4), .5, Material(Color3(0,0,0), Color3(0,.5,.8), 2)), ISphere(Point3(4.8,5.9,4), .5, Material(Color3(.9,.5,0), Color3(1,0,1), 3)), IBox(Point3(5.3,6,4), .5, Material(Color3(.7,0,.9), Color3(0,0,0), 0)));
const Bug bug1 = Bug(wing1, wing2);
const Shell shell1 = Shell(torus, torus2, ITorus(Point3(-2, 7.2, -2), .75, .3, Material(Color3(0,.5,.7), Color3(0,.7,.5), 3)), ITorus(Point3(-1.7, 7.2, -2), .75, .3, Material(Color3(0,.7,1), Color3(0,0,0), 0)), ITorus(Point3(-2, 7.65, -2), .5, .2, Material(Color3(0,.5,.7), Color3(0,.7,.5), 3)), ITorus(Point3(-1.7, 7.65, -2), .5, .2, Material(Color3(0,.7,1), Color3(0,0,0), 0)));
const ICylinder moon = ICylinder(Point3(-5, 6, -3.9), .3, .1, Material(Color3(0,.1,.6), Color3(0,1,0), 10));
const ICylinder cutMoon = ICylinder(Point3(-4.75, 6, -3.9), .3, .4, Material(Color3(0,.1,.6), Color3(0,1,0), 10));
const Pendant pendant = Pendant(ITorus(Point3(-5, 6, -5), 1.0, .1, Material(Color3(0,0,0), Color3(1,1,1), 2)), ISphere(Point3(-5, 6, -5.75), 0.5, Material(Color3(0,.7,1), Color3(0,0,0), 0)), moon, cutMoon);
const Pear pear = Pear(sphere1, egg2, ICylinder(Point3(0, 8.45, 0), .02, .2, Material(Color3(.2,.2,0), Color3(0,0,0), 0)));
const IBox table = IBox(Point3(-1.6,0,-1.5), 5.85, Material(Color3(.2,.2,0), Color3(0,0,0), 0));


float smin(float a, float b, float blendRadius) {
    float c = saturate(0.5 + (b - a) * (0.5 / blendRadius));
    return lerp(b, a, c) - blendRadius * c * (1.0 - c);
}

//Attempt. Ultimately Unused.
//http://www.johndcook.com/blog/2010/01/13/soft-maximum/
float smax(float x, float y) {
    float maximum = max(x, y);
	float minimum = min(x, y);
	return maximum + log( 1.0 + exp(minimum - maximum) );
}


float sceneDistance(const ICylinder cylinder, Point3 X, inout Material material){
    material =cylinder.material;
    Vector2 d = abs(Vector2(length(X.xz - cylinder.center.xz), X.y - cylinder.center.y)) - Vector2(cylinder.radius, cylinder.halfHeight);
    return min(maxComponent(d), 0) + length(max(d, Vector2(0, 0)));
}
      

float sceneDistance(const ITorus torus, Point3 X, inout Material material) {
    material = torus.material;
    return length(vec2(length(X.xz - torus.center.xz) - torus.minorRadius, X.y - torus.center.y)) - torus.majorRadius;
}
      
float sceneDistance(const ISphere sphere, Point3 X, inout Material material){
    material = sphere.material;
    return length(X - sphere.center) - sphere.radius;
}

float sceneDistance(const IBox box, Point3 X, inout Material material){
    material = box.material;
    Vector3 d = abs(X - box.center) - box.radius;
    return min(maxComponent(d), 0) + length(max(d, Vector3(0, 0, 0)));
}

float sceneDistance(const Wing wing, Point3 X, inout Material material){
    float a = subtractSurface(sceneDistance, wing.cutBox, wing.wSphere, X, material);
    float b = subtractSurface(sceneDistance, wing.cutSphere, wing.wSphere, X, material);
    return max(a, b);
}

float sceneDistance(const Shell shell, Point3 X, inout Material material){
    float a = subtractSurface(sceneDistance, shell.cut1, shell.ring1, X, material);
    float b = subtractSurface(sceneDistance, shell.cut2, shell.ring2, X, material);
    float c = subtractSurface(sceneDistance, shell.cut3, shell.ring3, X, material);
    
    return smin(a, smin(b, c, .05), .05);
}

float sceneDistance(const Pendant pendant, Point3 X, inout Material material){
    Material tmp;
    float a = subtractSurface(sceneDistance, pendant.rCut, pendant.ring, X, tmp);
    float b = subtractSurface(sceneDistance, pendant.mCut, pendant.moon, X, material);
    if (a < b){
        material = tmp;
    }
    return min(a, b);
}

float sceneDistance(const Pear pear, Point3 X, inout Material material){
    Material tmp;
    float a = surfaceUnion(sceneDistance, pear.bottom, pear.top, X, tmp, .5);
    float b = sceneDistance(pear.stem, X, material);
    if (a < b){
        material = tmp;
    }
    return smin(a, b, .05);
}

float sceneDistance(const Bug bug, Point3 X, inout Material material){
    return surfaceUnion(sceneDistance, bug.wing1, bug.wing2, X, material, .05);;
}

float sceneDistance(Point3 X, inout Material material) {

    // Replace this with a union of the objects in the scene.  You
    // don't necessarily need an explicit list of separate surfaces in
    // the way that the analytic tracer does.
    //
    // Think about how to change the API so that the closest surface
    // in a union sets the material. For that, some For intersection,
    // blending, and subtraction, whichever surface dominates the
    // distance computation should set the material.

    //return test(sceneDistance, testCylinder, X, material);
    Material tmp1, tmp2, tmp3, tmp4, tmp5;
    float t1, t2, t3, t4, t5;
    t1 = sceneDistance(pear, X, tmp1);
    t2 = inf;
    t3 = sceneDistance(shell1, X, tmp3);
    tmp3.lambertian *= normalize(mod(X,.05));
    t4 = sceneDistance(table, X, tmp5);
    tmp4.lambertian = ((mod(X.z, .2) < .1 && mod(X.x, .2) < .1)) || (mod(X.z, .2) > .1 && mod(X.x, .2) > .1) ? Color3(.9, 1, 1) : Color3(.9, 0, .3);
    t5 = sceneDistance(pendant, X, tmp5);

    if (t1 < t2 && t1 < t3 && t1 < t4 && t1 < t5){
        material = tmp1;
        return t1;
    }
    else if (t2 < t1 && t2 < t3 && t2 < t4 && t2 < t5){
        material = tmp2;
        return t2;
    }
    else if (t3 < t2 && t3 < t1 && t3 < t4 && t3 < t5){
        material = tmp3;
        return t3;
    }
    else if (t4 < t2 && t4 < t3 && t4 < t1 && t4 < t5){
        material = tmp4;
        return t4;
    }
    else if (t5 < t2 && t5 < t3 && t5 < t1 && t5 < t4){
        material = tmp5;
        return t5;
    }


}

float sceneDistance(Point3 X){
    Material ignore;
    return sceneDistance(X, ignore);
}

bool intersect(Point3 P, Vector3 w, inout float distance, inout Surfel surfel) {
     Point3  C = Point3(.5, .5, 0);
     float   r = .5;
     
     Vector3 v = P - C;
     float b = 2.0 * dot(w, v);
     float c = dot(v, v) - square(r);
     float d = square(b) - 4.0 * c;
     if (d < 0.0) { return false; }
     
     float dsqrt = sqrt(d);
     
     // Choose the first positive intersection
     float t = min(infIfNegative((-b - dsqrt) / 2.0),   
                   infIfNegative((-b + dsqrt) / 2.0));

     if (t < distance) { 
         surfel.position = P + w * t;
         surfel.normal   = normalize(surfel.position - C);
         //surfel.material = sphere.material;
         
         distance = t;
         return true;
     } else {
         return false;
     }
}

bool traceRayAnalytic(Point3 P, Vector3 w, inout Surfel surfel, in out float maxDistance) {
    float t = -P.y/w.y;
    if ((t < maxDistance) && (sign(w.y*P.y) < 0.0)){
       surfel.material.lambertian = Color3(1,1,1);
       surfel.normal = Vector3(0,1,0);
       surfel.position = P + w*t;
       maxDistance = t;
       return true;
    }
    else{
        return false;
    }
}

bool traceRayMarch(Point3 P, Vector3 w, inout Surfel surfel, inout float maxDistance){
    const int   maxIterations = 100;
    const float closeEnough   = 1e-2;
    float t = 0;
    Material material;
    for (int i = 0; ((i < maxIterations) && (t < maxDistance)); ++i) {
        float dt = sceneDistance(P + w * t, material);
        t += dt;
        if (dt < closeEnough) {
            maxDistance = t;
            surfel.position = P + w*t;
            float eps = 1e-4;
            Point3 Q = P + w*(t-eps);
            surfel.normal = normalize(Vector3(sceneDistance(Q+Vector3(eps, 0, 0)), sceneDistance(Q+Vector3(0, eps, 0)), sceneDistance(Q+Vector3(0, 0, eps)))-sceneDistance(Q, surfel.material));
            return true;
        }
    }
    return false;
}

bool traceRay(Point3 P, Vector3 w, inout Surfel surfel, inout float maxDistance){
    bool hit = traceRayAnalytic(P, w, surfel, maxDistance);
    hit = traceRayMarch(P, w, surfel, maxDistance) || hit;
    return hit;
}


void main() {

    // Generate an eye ray in camera space, and then transform to world space

    // Primary ray origin    
    Point3 P  = cameraToWorldMatrix[3];

    // Primary ray direction
    Vector3 w = Matrix3(cameraToWorldMatrix) * 
        normalize(Vector3((gl_FragCoord.xy - g3d_FragCoordExtent / 2.0) * Vector2(1, -1),
                          g3d_FragCoordExtent.y / ( -2.0 * tanHalfFieldOfViewY)));

    float maxDist = inf;       

    //////////////////////////////////////

    //pixelColor = (w + 1)/2;

    // Render the scene here

    //Code for checkerboard
    /*
    float width = 16;
    float x = mod(gl_FragCoord.x, 2*width);
    float y = mod(gl_FragCoord.y, 2*width);
    if ((x < width && y < width) || (x > width && y > width)){
        pixelColor = Color3(0, 0, 0);
    } else{
        pixelColor = Color3(1,1,1);
    }*/

    //Code for clouds
    //pixelColor = lerp(Color3(0, .2, .8), Color3(1, 1, 1), clamp(noise(gl_FragCoord.xy/60, 3), 0, 1));
   
    Surfel surfel;
    if (traceRay(P, w, surfel, maxDist)){
       
        Vector3 wi = normalize(Vector3(1,1,1));
        Vector3 n = surfel.normal;
        Radiance3 biradiance = Radiance3(2.8, 2.3,1);
        Radiance3 ambientRadiance = Radiance3(.5, .3, .3)*surfel.material.lambertian;
        Surfel ignore;
        float shadowDist = inf;
        bool shadow = traceRay(surfel.position + n*.1, wi, ignore, shadowDist);
        Vector3 wo = -w;
        Vector3 wh = normalize(wi+wo);
        Color3 f = (surfel.material.lambertian/pi)+ (pow(max(dot(n,wh),0), max(surfel.material.sigma,1))*(surfel.material.sigma+8)*surfel.material.glossy)/(8*pi);
        pixelColor = f*biradiance*max(0,dot(n, wi))*float(!shadow)+ambientRadiance;

        //For testing:
        //pixelColor = surfel.position;
        //pixelColor = (n+1)/2;
    } else{
        pixelColor = sampleTexture(environmentMap, w).rgb;
    }

    //////////////////////////////////////
     
    // Camera space z value
    float csZ = maxDist / w.z;
    
    // Pack into standard OpenGL depth buffer format to make the result compatible
    // with rasterization and post-processing.
    gl_FragDepth = (maxDist == inf) ? 1.0 : ((projectionMatrix22 * csZ + projectionMatrix23) / -csZ);
}
